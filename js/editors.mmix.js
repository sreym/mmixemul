// Generated by CoffeeScript 1.6.2
(function() {
  var $, getEditItem, plusEditing, pushToEdit, shared, startEdit, stopEdit, updateEditView;

  $ = jQuery;

  shared = window;

  getEditItem = function(block_div) {
    var editing, i, j;

    editing = block_div.data('editing');
    i = editing / 2 / block_div.data("options").sbsize | 0;
    j = editing / 2 % block_div.data("options").sbsize | 0;
    return $(block_div.find("div.line:nth-child(" + (i + 1) + ") span.item")[j]);
  };

  updateEditView = function(block_div) {
    var editing, item, item_text;

    editing = block_div.data('editing');
    if (editing !== false) {
      item = getEditItem(block_div);
      block_div.find("span.editing").removeClass("editing");
      item.addClass("editing");
      item_text = item.text().trim();
      if (editing % 2 === 0) {
        return item.html("<span class='cur'>" + item_text[0] + "</span>" + item_text[1]);
      } else {
        return item.html("" + item_text[0] + "<span class='cur'>" + item_text[1] + "</span>");
      }
    } else {
      return block_div.find("span.editing").removeClass("editing");
    }
  };

  plusEditing = function(block_div, i) {
    var nval;

    nval = block_div.data('editing') + i;
    if ((0 <= nval && nval < block_div.data("options").size * 2)) {
      block_div.data('editing', nval);
    } else {
      stopEdit(block_div);
    }
    return updateEditView(block_div);
  };

  pushToEdit = function(block_div, val) {
    var editing, item;

    if ((48 <= val && val <= 57) || (65 <= val && val <= 70)) {
      val -= val < 58 ? 48 : 55;
      item = getEditItem(block_div);
      editing = block_div.data('editing');
      if (editing % 2 === 0) {
        item.html("" + (val.toString(16)) + (item.text()[1]));
      } else {
        item.html("" + (item.text()[0]) + (val.toString(16)));
      }
      block_div.trigger("push", [editing, val]);
      return plusEditing(block_div, 1);
    }
  };

  stopEdit = function(block_div) {
    if (block_div.data('editing') !== false) {
      block_div.data('editing', false);
      return updateEditView(block_div);
    }
  };

  startEdit = function(block_div, i, j) {
    block_div.data('editing', (i * block_div.data("options").sbsize + j) * 2);
    return updateEditView(block_div);
  };

  $.fn.hexeditor = function(options) {
    var defaults, getLineNum;

    defaults = {
      size: 64,
      sbsize: 4,
      numberIsLine: false,
      getByte: function(i, j) {
        return 0;
      },
      postLine: function(i) {
        return "";
      }
    };
    options = $.extend(defaults, options);
    getLineNum = function(i, options) {
      if (options.numberIsLine) {
        return shared.addLeadZero(i.toString(16), Math.ceil(Math.log(options.size / options.sbsize) / Math.log(16)));
      } else {
        return shared.addLeadZero((i * options.sbsize).toString(16), Math.ceil(Math.log(options.size) / Math.log(16)));
      }
    };
    if (shared.hexEditors == null) {
      shared.hexEditors = new Array();
    }
    return this.each(function() {
      var block_div, i, j, line_div, line_item, line_num, sbnum, _i, _j, _ref;

      block_div = $(this);
      block_div.data("options", options);
      shared.hexEditors.push(block_div);
      block_div.addClass("hexEditor");
      block_div.data('editing', false);
      sbnum = Math.ceil(options.size / options.sbsize);
      for (i = _i = 0; 0 <= sbnum ? _i < sbnum : _i > sbnum; i = 0 <= sbnum ? ++_i : --_i) {
        line_div = $("<div class='line'></div>");
        line_num = $("<span class='num'>" + (getLineNum(i, options)) + "</span>");
        line_div.append(line_num);
        for (j = _j = 0, _ref = options.sbsize; 0 <= _ref ? _j < _ref : _j > _ref; j = 0 <= _ref ? ++_j : --_j) {
          line_item = $("<span class='item'>" + (shared.addLeadZero(options.getByte(i, j).toString(16), 2)) + "</span>");
          line_div.append(line_item);
        }
        line_div.append(options.postLine.call(block_div, i));
        block_div.append(line_div);
      }
      block_div.find("span.item").click(function(e) {
        var block_i, el, _k, _len, _ref1;

        el = $(this);
        if (el.hasClass("editing")) {
          return stopEdit(block_div);
        } else {
          _ref1 = shared.hexEditors;
          for (_k = 0, _len = _ref1.length; _k < _len; _k++) {
            block_i = _ref1[_k];
            stopEdit(block_i);
          }
          return startEdit(block_div, el.parent().prevAll("div.line").length, el.prevAll('span.item').length);
        }
      });
      return $(document).keydown(function(e) {
        if (block_div.data("editing") !== false) {
          switch (e.keyCode) {
            case 9:
              if (e.shiftKey) {
                plusEditing(block_div, Math.floor((block_div.data('editing') - options.sbsize * 2) / (options.sbsize * 2)) * (options.sbsize * 2) - block_div.data('editing'));
              } else {
                plusEditing(block_div, Math.floor((block_div.data('editing') + options.sbsize * 2) / (options.sbsize * 2)) * (options.sbsize * 2) - block_div.data('editing'));
              }
              return e.preventDefault();
            case 27:
              return stopEdit(block_div);
            case 8:
              plusEditing(block_div, -1);
              return e.preventDefault();
            case 37:
              plusEditing(block_div, e.shiftKey ? -2 : -1);
              return e.preventDefault();
            case 38:
              plusEditing(block_div, -2 * options.sbsize);
              return e.preventDefault();
            case 39:
              plusEditing(block_div, e.shiftKey ? 2 : 1);
              return e.preventDefault();
            case 40:
              plusEditing(block_div, 2 * options.sbsize);
              return e.preventDefault();
            default:
              return pushToEdit(block_div, e.keyCode);
          }
        }
      });
    });
  };

  $.fn.mmixmemeditor = function(options) {
    var defaults, obj;

    defaults = {
      size: 1024,
      sbsize: 4,
      numberIsLine: false,
      data: null
    };
    options = $.extend(defaults, options);
    if (options.data === null) {
      throw "Data is undefined.";
    }
    options.size = options.data.size();
    options.getByte = function(i, j) {
      return options.data.getByte(i * options.sbsize + j);
    };
    obj = this;
    options.data.addEventListener("set", function(data) {
      var i, j, line_div, line_div2, line_items, line_items2, t, v, _i, _j;

      if (obj.data("editing") === false) {
        i = data.i / options.sbsize | 0;
        j = data.i % options.sbsize | 0;
        line_div = obj.find("div.line:nth-child(" + (i + 1) + ")");
        line_div2 = obj.find("div.line:nth-child(" + (i + 2) + ")");
        line_items = line_div.find(".item");
        v = data.val;
        switch (data.size) {
          case 1:
            $(line_items[j]).text(shared.addLeadZero((v & 0xFF).toString(16), 2));
            break;
          case 2:
            $(line_items[j + 0]).text(shared.addLeadZero((v >>> 8).toString(16), 2));
            $(line_items[j + 1]).text(shared.addLeadZero((v & 0xFF).toString(16), 2));
            break;
          case 4:
            for (t = _i = 0; _i < 4; t = ++_i) {
              $(line_items[j + t]).text(shared.addLeadZero(((v >>> (24 - t * 8)) & 0xFF).toString(16), 2));
            }
            break;
          case 8:
            line_items2 = line_div2.find(".item");
            for (t = _j = 0; _j < 4; t = ++_j) {
              $(line_items[j + t]).text(shared.addLeadZero((v.getByte(t)).toString(16), 2));
              $(line_items2[j + t]).text(shared.addLeadZero((v.getByte(4 + t)).toString(16), 2));
            }
            break;
          default:
            throw "Wrong size.";
        }
        line_div.addClass('updated');
        if (data.size === 8) {
          line_div2.addClass('updated');
        }
        return setTimeout(function() {
          line_div.removeClass('updated');
          return line_div2.removeClass('updated');
        }, 1000);
      }
    });
    this.hexeditor(options);
    return this.on("push", function(e, i, val) {
      var byteNum, byteSh, byteVal;

      byteNum = i / 2 | 0;
      byteSh = i % 2 | 0;
      byteVal = options.data.getByte(byteNum);
      if (byteSh === 0) {
        byteVal = (byteVal & 0x0F) ^ ((val & 0xF) << 4);
      } else {
        byteVal = (byteVal & 0xF0) ^ (val & 0xF);
      }
      return options.data.setByte(byteNum, byteVal);
    });
  };

  $.fn.mmixregeditor = function(options) {
    var defaults, obj;

    defaults = {
      size: 2048,
      sbsize: 8,
      numberIsLine: true,
      data: null
    };
    options = $.extend(defaults, options);
    if (options.data === null) {
      throw "Data is undefined.";
    }
    options.size = options.data.size() * 8;
    options.getByte = function(i, j) {
      return options.data.getOcta(i).getByte(j);
    };
    obj = this;
    options.data.addEventListener("set", function(data) {
      var i, line_div, line_items, _i;

      if (obj.data("editing") === false) {
        line_div = obj.find("div.line:nth-child(" + (data.i + 1) + ")");
        line_items = line_div.find(".item");
        for (i = _i = 0; _i < 8; i = ++_i) {
          $(line_items[i]).text(shared.addLeadZero(data.val.getByte(i).toString(16), 2));
        }
        line_div.addClass('updated');
        return setTimeout(function() {
          return line_div.removeClass('updated');
        }, 2000);
      }
    });
    options.data.addEventListener("get", function(data) {
      var line_div;

      if (obj.data("editing") === false) {
        line_div = obj.find("div.line:nth-child(" + (data.i + 1) + ")");
        line_div.addClass('updated_reading');
        return setTimeout(function() {
          return line_div.removeClass('updated_reading');
        }, 2000);
      }
    });
    this.hexeditor(options);
    return this.on("push", function(e, i, val) {
      var byteSh, regNum, regVal, wydeNum, wydeVal;

      regNum = i / (2 * options.sbsize) | 0;
      regVal = options.data.getOcta(regNum);
      wydeNum = (i / 4 | 0) % 4 | 0;
      byteSh = i % 4 | 0;
      wydeVal = regVal.get(wydeNum);
      wydeVal = (wydeVal & ~(0xF000 >>> (byteSh * 4))) ^ ((val & 0xF) << (3 - byteSh) * 4);
      regVal.set(wydeNum, wydeVal);
      return options.data.setOcta(regNum, regVal);
    });
  };

}).call(this);

/*
//@ sourceMappingURL=editors.mmix.map
*/
