// Generated by CoffeeScript 1.6.2
(function() {
  var cmd, getAnswerLI, shared;

  shared = window;

  shared.regs = new shared.Registers(256);

  shared.mem = new shared.Memory(1024);

  shared.proc = new shared.MMIXProcessor(mem, regs);

  getAnswerLI = function(res, task, ext) {
    var text, tli;

    text = void 0;
    switch (task.cmd) {
      case "set":
        break;
      default:
        text = "<li>" + JSON.stringify(task) + "</li>";
    }
    tli = $(text);
    tli.addClass("resItem");
    if (res) {
      tli.addClass("ok");
    } else {
      tli.addClass("wrong");
    }
    return tli;
  };

  shared.goTask = function(i, j) {
    var e, ext, r, res, task, _results;

    task = shared.tasks[i][j];
    res = $("#results");
    res.empty();
    i = 0;
    _results = [];
    while (i < task.length) {
      try {
        ext = {};
        r = cmd[task[i].cmd](task[i], ext);
        res.append(getAnswerLI(r, task[i], ext));
      } catch (_error) {
        e = _error;
        alert("error! with cmd = " + task[i].cmd);
      }
      _results.push(i++);
    }
    return _results;
  };

  cmd = {};

  cmd.load = function(obj) {
    var i, len, src;

    src = $("#program")[0].value.replace(/[^0-9A-Fa-f]/g, "");
    len = src.length;
    if (len % 8 !== 0) {
      alert("wrong line");
    }
    i = 0;
    while (i < len / 8) {
      shared.mem.setTetra(i * 4, parseInt(src.substr(i * 8, 8), 16));
      i++;
    }
    return true;
  };

  cmd.get = function(obj) {
    switch (obj.size) {
      case 8:
        if (obj.val instanceof shared.OctaByte) {
          return shared.mem.getOcta(obj.addr).cmpu(obj.val) === 0;
        } else {
          return shared.mem.getOcta(obj.addr).cmpu(new shared.OctaByte(0, obj.val)) === 0;
        }
        break;
      case 4:
        return shared.mem.getTetra(obj.addr) === obj.val;
      case 2:
        return shared.mem.getWyde(obj.addr) === obj.val;
    }
    return true;
  };

  cmd.go = function(obj) {
    shared.proc.run();
    return true;
  };

  cmd.set = function(obj) {
    switch (obj.size) {
      case 8:
        if (obj.val instanceof shared.OctaByte) {
          shared.mem.setOcta(obj.addr, obj.val);
        } else {
          shared.mem.setOcta(obj.addr, new shared.OctaByte(0, obj.val));
        }
        break;
      case 4:
        shared.mem.setTetra(obj.addr, obj.val);
        break;
      case 2:
        shared.mem.setWyde(obj.addr, obj.val);
    }
    return true;
  };

  cmd.reg = function(obj) {
    var i, j, numI, octaByte;

    switch (obj.val) {
      case "random":
        i = 0;
        while (i < shared.regs.size()) {
          shared.regs.setOcta(i, new shared.OctaByte(Math.floor(Math.random() * Math.pow(2, 32)), Math.floor(Math.random() * Math.pow(2, 32))));
          i++;
        }
        break;
      case "inc":
        numI = 0;
        octaByte = void 0;
        i = 0;
        while (i < 256) {
          j = 0;
          while (j < 8) {
            octaByte = shared.regs.getOcta(i);
            octaByte.setByte(j, numI);
            shared.regs.setOcta(i, octaByte);
            numI++;
            j++;
          }
          i++;
        }
        break;
      default:
        throw "Unknown val for reg";
    }
    return true;
  };

  cmd.mem = function(obj) {
    var i;

    switch (obj.val) {
      case "random":
        i = 0;
        while (i < shared.mem.size()) {
          shared.mem.setByte(i, Math.floor(Math.random() * 255));
          i++;
        }
        break;
      case "inc":
        i = 0;
        while (i < 1024) {
          shared.mem.setByte(i, i % 256);
          i++;
        }
        break;
      default:
        throw "Unknown val for mem";
    }
    return true;
  };

}).call(this);

/*
//@ sourceMappingURL=testsystem.map
*/
