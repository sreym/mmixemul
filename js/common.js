// Generated by CoffeeScript 1.6.2
(function() {
  var DEBUG, shared;

  DEBUG = true;

  shared = window;

  shared.addLeadZero = function(str, len) {
    var strRes;

    strRes = str;
    while (strRes.length < len) {
      strRes = "0" + strRes;
    }
    return strRes;
  };

  shared.OctaByte = (function() {
    function OctaByte(hbyte, lbyte) {
      if (lbyte == null) {
        lbyte = null;
      }
      if (hbyte instanceof shared.OctaByte && lbyte === null) {
        this.hbyte = hbyte.hbyte;
        this.lbyte = hbyte.lbyte;
      } else {
        if (DEBUG && typeof hbyte !== "number") {
          throw "hbyte should be type of number";
        }
        if (DEBUG && typeof lbyte !== "number") {
          throw "lbyte should be type of number";
        }
        this.hbyte = hbyte;
        this.lbyte = lbyte;
      }
    }

    OctaByte.prototype.is_neg = function() {
      return (this.hbyte >>> 31) > 0;
    };

    OctaByte.prototype.setH = function(val) {
      return this.hbyte = this.getMH() ^ (val << 16);
    };

    OctaByte.prototype.setMH = function(val) {
      return this.hbyte = (this.getH() << 16) ^ val;
    };

    OctaByte.prototype.setML = function(val) {
      return this.lbyte = this.getL() ^ (val << 16);
    };

    OctaByte.prototype.setL = function(val) {
      return this.lbyte = (this.getML() << 16) ^ val;
    };

    OctaByte.prototype.set = function(i, val) {
      switch (i) {
        case 0:
          return this.setH(val);
        case 1:
          return this.setMH(val);
        case 2:
          return this.setML(val);
        case 3:
          return this.setL(val);
      }
    };

    OctaByte.prototype.setByte = function(i, val) {
      var wydeVal;

      wydeVal = this.get(i / 2 | 0);
      if (i % 2 === 0) {
        wydeVal = (wydeVal & 0x00FF) ^ ((val & 0xFF) << 8);
      } else {
        wydeVal = (wydeVal & 0xFF00) ^ (val & 0xFF);
      }
      return this.set(i / 2 | 0, wydeVal);
    };

    OctaByte.prototype.getH = function() {
      return this.hbyte >>> 16;
    };

    OctaByte.prototype.getMH = function() {
      return this.hbyte & ((1 << 16) - 1);
    };

    OctaByte.prototype.getML = function() {
      return this.lbyte >>> 16;
    };

    OctaByte.prototype.getL = function() {
      return this.lbyte & ((1 << 16) - 1);
    };

    OctaByte.prototype.get = function(i) {
      switch (i) {
        case 0:
          return this.getH();
        case 1:
          return this.getMH();
        case 2:
          return this.getML();
        case 3:
          return this.getL();
      }
    };

    OctaByte.prototype.getByte = function(i) {
      var wydeVal;

      wydeVal = this.get(i / 2 | 0);
      if (i % 2 === 0) {
        return wydeVal >>> 8;
      } else {
        return wydeVal & 0xFF;
      }
    };

    OctaByte.prototype.setFloat = function(val) {
      var dArray, dArray64, i8Array;

      dArray = new Float32Array(1);
      dArray[0] = val;
      dArray64 = new Float64Array(1);
      dArray64[0] = dArray[0];
      i8Array = new Uint8Array(dArray64.buffer);
      this.hbyte = (i8Array[0] << 24) + (i8Array[1] << 16) + (i8Array[2] << 8) + (i8Array[3] << 0);
      return this.lbyte = (i8Array[4] << 24) + (i8Array[5] << 16) + (i8Array[6] << 8) + (i8Array[7] << 0);
    };

    OctaByte.prototype.setInt = function(val, signed) {
      var nVal;

      if (signed == null) {
        signed = true;
      }
      nVal = val > 0 ? val : -val;
      this.lbyte = nVal & 0xFFFFFFFF;
      this.hbyte = (nVal / (Math.pow(2, 32))) & 0xFFFFFFFF;
      if (signed && val < 0) {
        return this.assign(this.neg().add(1));
      }
    };

    OctaByte.prototype.getDouble = function() {
      var i8Array;

      i8Array = new Uint8Array(8);
      i8Array[0] = (this.hbyte >>> 24) & 0xFF;
      i8Array[1] = (this.hbyte >>> 16) & 0xFF;
      i8Array[2] = (this.hbyte >>> 8) & 0xFF;
      i8Array[3] = (this.hbyte >>> 0) & 0xFF;
      i8Array[4] = (this.lbyte >>> 24) & 0xFF;
      i8Array[5] = (this.lbyte >>> 16) & 0xFF;
      i8Array[6] = (this.lbyte >>> 8) & 0xFF;
      i8Array[7] = (this.lbyte >>> 0) & 0xFF;
      return new Float64Array(i8Array.buffer)[0];
    };

    OctaByte.prototype.setDouble = function(val) {
      var dArray, i8Array;

      dArray = new Float64Array(1);
      dArray[0] = val;
      i8Array = new Uint8Array(dArray.buffer);
      this.hbyte = (i8Array[0] << 24) + (i8Array[1] << 16) + (i8Array[2] << 8) + (i8Array[3] << 0);
      this.lbyte = (i8Array[4] << 24) + (i8Array[5] << 16) + (i8Array[6] << 8) + (i8Array[7] << 0);
      return this;
    };

    OctaByte.prototype.add = function(b, exc) {
      var nob;

      if (exc == null) {
        exc = null;
      }
      if (b instanceof shared.OctaByte) {
        nob = new shared.OctaByte((this.hbyte >>> 0) + (b.hbyte >>> 0), (this.lbyte >>> 0) + (b.lbyte >>> 0));
      } else {
        nob = new shared.OctaByte(this.hbyte >>> 0, (this.lbyte >>> 0) + (b >>> 0));
      }
      if (nob.lbyte > 0xFFFFFFFF) {
        nob.hbyte = nob.hbyte + 1;
        nob.lbyte = (nob.lbyte & 0xFFFFFFFF) >>> 0;
      }
      if (nob.hbyte > 0xFFFFFFFF) {
        nob.hbyte = nob.hbyte & 0xFFFFFFFF;
        exc = "OctaByte overflow";
      }
      return nob;
    };

    OctaByte.prototype.sub = function(b, exc) {
      var bOct;

      if (exc == null) {
        exc = null;
      }
      if (b instanceof shared.OctaByte) {
        bOct = new shared.OctaByte(b);
      } else {
        bOct = new shared.OctaByte(0, b);
      }
      bOct.hbyte = (bOct.hbyte & 0xFFFFFFFF) ^ 0xFFFFFFFF;
      bOct.lbyte = (bOct.lbyte & 0xFFFFFFFF) ^ 0xFFFFFFFF;
      bOct = bOct.add(1);
      return this.add(bOct);
    };

    OctaByte.prototype.or = function(b) {
      if (b instanceof shared.OctaByte) {
        return new shared.OctaByte(this.hbyte | b.hbyte, this.lbyte | b.lbyte);
      } else {
        return new shared.OctaByte(this.hbyte, this.lbyte | b);
      }
    };

    OctaByte.prototype.and = function(b) {
      if (b instanceof shared.OctaByte) {
        return new shared.OctaByte(this.hbyte & b.hbyte, this.lbyte & b.lbyte);
      } else {
        return new shared.OctaByte(this.hbyte, this.lbyte & b);
      }
    };

    OctaByte.prototype.xor = function(b) {
      if (b instanceof shared.OctaByte) {
        return new shared.OctaByte(this.hbyte ^ b.hbyte, this.lbyte ^ b.lbyte);
      } else {
        return new shared.OctaByte(this.hbyte, this.lbyte ^ b);
      }
    };

    OctaByte.prototype.neg = function() {
      return new shared.OctaByte(this.hbyte ^ 0xFFFFFFFF, this.lbyte ^ 0xFFFFFFFF);
    };

    OctaByte.prototype.cmpu = function(b) {
      if (this.hbyte > b.hbyte) {
        return 1;
      } else if (this.hbyte < b.hbyte) {
        return -1;
      } else if (this.lbyte > b.lbyte) {
        return 1;
      } else if (this.lbyte < b.lbyte) {
        return -1;
      } else {
        return 0;
      }
    };

    OctaByte.prototype.cmp = function(b) {
      if (!this.is_neg() && b.is_neg()) {
        return 1;
      } else if (this.is_neg() && !b.is_neg()) {
        return -1;
      } else if (!b.is_neg() && !this.is_neg()) {
        return this.cmpu(b);
      } else {
        return b.cmpu(this);
      }
    };

    OctaByte.prototype.assign = function(b) {
      this.hbyte = b.hbyte;
      return this.lbyte = b.lbyte;
    };

    OctaByte.prototype.toString = function() {
      var h, l, mh, ml;

      h = shared.addLeadZero(this.getH().toString(16), 4);
      mh = shared.addLeadZero(this.getMH().toString(16), 4);
      ml = shared.addLeadZero(this.getML().toString(16), 4);
      l = shared.addLeadZero(this.getL().toString(16), 4);
      return h + mh + ml + l;
    };

    return OctaByte;

  })();

}).call(this);

/*
//@ sourceMappingURL=common.map
*/
