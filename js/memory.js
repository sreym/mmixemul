// Generated by CoffeeScript 1.6.3
(function() {
  var DEBUG, shared;

  DEBUG = true;

  shared = window;

  shared.Memory = (function() {
    function Memory(size) {
      this.data = new Uint32Array(size / 4);
      this.events = {};
    }

    Memory.prototype.size = function() {
      return this.data.length * 4;
    };

    Memory.prototype.addEventListener = function(eventName, f) {
      if (this.events[eventName] == null) {
        this.events[eventName] = new Array();
      }
      return this.events[eventName].push(f);
    };

    Memory.prototype.trigger = function(eventName, data) {
      var f, _i, _len, _ref, _results;
      if (this.events[eventName] != null) {
        _ref = this.events[eventName];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          _results.push(f.call(this, data));
        }
        return _results;
      }
    };

    Memory.prototype.setByte = function(i, val) {
      var hi, li, oldval, shift;
      if (DEBUG && typeof val !== "number") {
        throw "val should be type of number";
      }
      val = val & 0xFF;
      hi = i / 4 | 0;
      li = 3 - (i % 4);
      shift = 8 * li | 0;
      oldval = this.data[hi];
      this.data[hi] = (oldval & ~(0xFF << shift)) ^ ((val & 0xFF) << shift);
      this.trigger('set', {
        i: i,
        size: 1,
        val: val
      });
      return val & 0xFF;
    };

    Memory.prototype.setWyde = function(i, val) {
      var hi, li, oldval, shift;
      if (DEBUG && typeof val !== "number") {
        throw "val should be type of number";
      }
      val = val & 0xFFFF;
      hi = i / 4 | 0;
      li = (i >>> 1) & 1;
      oldval = this.data[hi];
      shift = 16 * (1 - li);
      this.data[hi] = (oldval & ~(0xFFFF << shift)) ^ ((val & 0xFFFF) << shift);
      this.trigger('set', {
        i: i & ~0x1,
        size: 2,
        val: val
      });
      return val & 0xFFFF;
    };

    Memory.prototype.setTetra = function(i, val) {
      var hi, oldval;
      if (DEBUG && typeof val !== "number") {
        throw "val should be type of number";
      }
      hi = i / 4 | 0;
      oldval = this.data[hi];
      this.data[hi] = val;
      this.trigger('set', {
        i: i & ~0x3,
        size: 4,
        val: val
      });
      return val;
    };

    Memory.prototype.setOcta = function(i, val) {
      var hi, oldval;
      if (DEBUG && !(val instanceof shared.OctaByte)) {
        throw "val should be instance of OctaByte";
      }
      hi = (i / 8 | 0) * 2;
      this.data[hi] = val.hbyte;
      this.data[hi + 1] = val.lbyte;
      oldval = new OctaByte(this.data[hi], this.data[hi + 1]);
      this.trigger('set', {
        i: i & ~0x7,
        size: 8,
        val: val
      });
      return val;
    };

    Memory.prototype.getByte = function(i) {
      var hi, li, shift, val;
      hi = i / 4 | 0;
      li = 3 - (i % 4);
      shift = 8 * li | 0;
      val = (this.data[hi] >>> shift) & 0xFF;
      this.trigger('get', {
        hi: hi,
        li: li,
        val: val,
        size: 1,
        i: i
      });
      return val;
    };

    Memory.prototype.getWyde = function(i) {
      var hi, li, shift, val;
      hi = i / 4 | 0;
      li = (i >>> 1) & 1;
      shift = 16 * (1 - li);
      val = (this.data[hi] >>> shift) & 0xFFFF;
      this.trigger('get', {
        hi: hi,
        li: li,
        val: val,
        size: 2,
        i: i
      });
      return val;
    };

    Memory.prototype.getTetra = function(i) {
      var hi;
      hi = i / 4 | 0;
      this.trigger('get', {
        hi: hi,
        li: 0,
        size: 4,
        i: i
      });
      return this.data[hi];
    };

    Memory.prototype.getOcta = function(i) {
      var hi, val;
      hi = (i / 8 | 0) * 2;
      val = new OctaByte(this.data[hi], this.data[hi + 1]);
      this.trigger('get', {
        hi: hi,
        li: hi + 1,
        val: val,
        size: 8,
        i: i
      });
      return val;
    };

    return Memory;

  })();

}).call(this);

/*
//@ sourceMappingURL=memory.map
*/
